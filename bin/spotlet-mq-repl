#!/usr/bin/env node

/**
 * Module dependencies
 */

var mq = require('../')
  , os = require('os')
  , repl = require('repl')
  , Batch = require('batch')

var exit = process.exit;
var HOST = process.env.HOST || 'localhost';
var PORT = process.env.PORT || 9346;
var client = mq.createCommandClient().connect(HOST, PORT);
var VERSION = require('../package').version
var put = console.log.bind(console);

// init repl
var r = repl.start({
  prompt: 'mq> ',
  input: process.stdin,
  output: process.stdout,
  useGlobal: false,
  ignoreUndefined: true,
  eval: oneval
});


var cmds = [
  'list', 'ps', 'mount', 'clone',
  'stop', 'rm', 'echo', 'printf',
  'purge', 'status'
];

// enable some tab completion
r.complete = function (line, done) {
  var comps = cmds;
  var hits = null;
  var tried = null;

  function hintFromOutput (realm) {
    send([realm], function (err, res) {
      res = (Array.isArray(res) ? res : [res]).filter(Boolean);
      tried = line.split(' ').filter(Boolean).pop();
      hits = res.filter(function (c) { return 0 == String(c).indexOf(tried);})
      done(null, [
        (hits.length ? hits : res.map(String)),
        (res.length > 0 ? tried : line)
      ]);
    });
  }

  line = String(line);

  if (-1 != line.indexOf('mount')) {
    hintFromOutput('list');
  } else if (-1 != line.indexOf('stop') || -1 != line.indexOf('kill')) {
    hintFromOutput('ps');
  } else if (-1 != line.indexOf('rm')) {
    hintFromOutput('list');
  } else {
    hits = cmds.filter(function (c) { return 0 == c.indexOf(line);})
    done(null, [hits.length ? hits : comps, line]);
  }
};

process.on('SIGINT', function (signal, code) {
  exit(0);
});

r.on('exit', function () {
  put()
  put("bye : ]");
  exit(0)
});

function oneval (src, context, filename, done) {
  var cmd = null;
  var parts = null;
  src = src.replace(/\r|\n/g,'').replace(/^\(/,'').replace(/\)$/g, '');
  parts = src.split(' ');
  send(parts, done);
}

function send (args, done) {
  var cmd = mq.Command(translate(args.shift()), args);
  var batch = null;

  switch (cmd.realm) {
    case 'exit':
      exit(0);
    break;

    case 'help':
      if (0 == args.length) {
        put("Spotlet MQ REPL v%s (%s-%s)", VERSION, os.arch(), os.platform());
        put("These commands are defined internally and are known as \"realms\".");
        put("Type `help' to see this message and list of commands.");
        put("See below for usage on available commands:");
        put();
        batch = new Batch().concurrency(1);
        cmds.forEach(function (c) {
          batch.push(function (next) {
            client.send(mq.Command(c, ['-h']), function (err, res) {
              put("\t%s", String(res).replace('usage:', '').trim().replace(/\s/, '\t'));
              next(err);
            });
          });
        });

        batch.end(function (err, res) {
          put();
          done(err, undefined);
        });
        return;
      } else {
        if ('-h' == args[0]) {
          put("usage: help [-h] [command]");
          return done(null, undefined);
        } else {
          args.push('-h');
          cmd = mq.Command(translate(args.shift()), args);
        }
      }
      break;
  }

  if (!cmd.realm) {
    return done(null, undefined);
  }

  client.send(cmd, function (err, res) {
    var result = null;
    var tmp = result;
    var str = String(res);
    if (str.length) {
      result = str.split('\n').filter(Boolean);
      if (0 == result.length) {
        result = null;
      } else if (1 == result.length) {
        result = result[0];
        try {
          tmp = JSON.parse(result);
          result = tmp;
        } catch (e) { }
        switch (typeof result) {
          case 'string':
            if (String(result).match(/[error|usage]\:?/)) {
              result = (new Error(result.replace(/error\:?\s+/, ''))).message;
              console.error(result)
              return done(null, undefined);
            }
          break;
        }

      } else try {
        tmp = JSON.parse(str);
        result = tmp;
      } catch (e) {
        if ('string' == typeof result) {
          result = result.split('\n');
        }

        result.forEach(function (line) {
          put(line);
        });

        return done(null, undefined);
      }
    }

    // emit
    done(err, result);
  });
}

function translate (cmd) {
  switch (cmd) {
    case 'ls': cmd = 'list'; break;
    case 'kill': cmd = 'stop'; break;
  }

  return cmd;
}
